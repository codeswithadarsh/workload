{"ast":null,"code":"import { fromEvent } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let NoteService = /*#__PURE__*/(() => {\n  class NoteService {\n    constructor() {\n      this.notes = [];\n      this.loadState();\n      this.storageListenSub = fromEvent(window, 'storage').subscribe(event => {\n        if (event.key === 'notes') this.loadState();\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.storageListenSub) this.storageListenSub.unsubscribe();\n    }\n\n    getNotes() {\n      return this.notes;\n    }\n\n    getNote(id) {\n      return this.notes.find(n => n.id === id);\n    }\n\n    addNote(note) {\n      this.notes.push(note);\n      this.saveState();\n    }\n\n    updateNote(id, updatedFields) {\n      const note = this.getNote(id);\n      Object.assign(note, updatedFields);\n      this.saveState();\n    }\n\n    deleteNote(id) {\n      const noteIndex = this.notes.findIndex(n => n.id === id);\n      if (noteIndex == -1) return;\n      this.notes.splice(noteIndex, 1);\n      this.saveState();\n    }\n\n    saveState() {\n      localStorage.setItem('notes', JSON.stringify(this.notes));\n    }\n\n    loadState() {\n      try {\n        const notesInStorage = JSON.parse(localStorage.getItem('notes')); // if (!notesInStorage) return\n\n        this.notes.length = 0; // clear the notes array (while keeping the reference)\n\n        this.notes.push(...notesInStorage);\n      } catch (e) {\n        console.log('There was an error retrieving the notes from localStorage');\n        console.log(e);\n      }\n    }\n\n  }\n\n  NoteService.ɵfac = function NoteService_Factory(t) {\n    return new (t || NoteService)();\n  };\n\n  NoteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NoteService,\n    factory: NoteService.ɵfac,\n    providedIn: 'root'\n  });\n  return NoteService;\n})();","map":null,"metadata":{},"sourceType":"module"}